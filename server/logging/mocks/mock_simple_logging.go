// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/logging (interfaces: SimpleLogging)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logging "github.com/runatlantis/atlantis/server/logging"
)

// MockSimpleLogging is a mock of SimpleLogging interface.
type MockSimpleLogging struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleLoggingMockRecorder
}

// MockSimpleLoggingMockRecorder is the mock recorder for MockSimpleLogging.
type MockSimpleLoggingMockRecorder struct {
	mock *MockSimpleLogging
}

// NewMockSimpleLogging creates a new mock instance.
func NewMockSimpleLogging(ctrl *gomock.Controller) *MockSimpleLogging {
	mock := &MockSimpleLogging{ctrl: ctrl}
	mock.recorder = &MockSimpleLoggingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleLogging) EXPECT() *MockSimpleLoggingMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockSimpleLogging) Debug(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockSimpleLoggingMockRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockSimpleLogging)(nil).Debug), varargs...)
}

// Err mocks base method.
func (m *MockSimpleLogging) Err(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Err", varargs...)
}

// Err indicates an expected call of Err.
func (mr *MockSimpleLoggingMockRecorder) Err(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSimpleLogging)(nil).Err), varargs...)
}

// Flush mocks base method.
func (m *MockSimpleLogging) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockSimpleLoggingMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockSimpleLogging)(nil).Flush))
}

// GetHistory mocks base method.
func (m *MockSimpleLogging) GetHistory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockSimpleLoggingMockRecorder) GetHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockSimpleLogging)(nil).GetHistory))
}

// Info mocks base method.
func (m *MockSimpleLogging) Info(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockSimpleLoggingMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSimpleLogging)(nil).Info), varargs...)
}

// Log mocks base method.
func (m *MockSimpleLogging) Log(arg0 logging.LogLevel, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockSimpleLoggingMockRecorder) Log(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSimpleLogging)(nil).Log), varargs...)
}

// SetLevel mocks base method.
func (m *MockSimpleLogging) SetLevel(arg0 logging.LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", arg0)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockSimpleLoggingMockRecorder) SetLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockSimpleLogging)(nil).SetLevel), arg0)
}

// Warn mocks base method.
func (m *MockSimpleLogging) Warn(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockSimpleLoggingMockRecorder) Warn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockSimpleLogging)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockSimpleLogging) With(arg0 ...interface{}) logging.SimpleLogging {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(logging.SimpleLogging)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockSimpleLoggingMockRecorder) With(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockSimpleLogging)(nil).With), arg0...)
}

// WithHistory mocks base method.
func (m *MockSimpleLogging) WithHistory(arg0 ...interface{}) logging.SimpleLogging {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithHistory", varargs...)
	ret0, _ := ret[0].(logging.SimpleLogging)
	return ret0
}

// WithHistory indicates an expected call of WithHistory.
func (mr *MockSimpleLoggingMockRecorder) WithHistory(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHistory", reflect.TypeOf((*MockSimpleLogging)(nil).WithHistory), arg0...)
}
