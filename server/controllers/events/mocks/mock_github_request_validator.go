// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/controllers/events (interfaces: GithubRequestValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGithubRequestValidator is a mock of GithubRequestValidator interface.
type MockGithubRequestValidator struct {
	ctrl     *gomock.Controller
	recorder *MockGithubRequestValidatorMockRecorder
}

// MockGithubRequestValidatorMockRecorder is the mock recorder for MockGithubRequestValidator.
type MockGithubRequestValidatorMockRecorder struct {
	mock *MockGithubRequestValidator
}

// NewMockGithubRequestValidator creates a new mock instance.
func NewMockGithubRequestValidator(ctrl *gomock.Controller) *MockGithubRequestValidator {
	mock := &MockGithubRequestValidator{ctrl: ctrl}
	mock.recorder = &MockGithubRequestValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubRequestValidator) EXPECT() *MockGithubRequestValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockGithubRequestValidator) Validate(arg0 *http.Request, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockGithubRequestValidatorMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockGithubRequestValidator)(nil).Validate), arg0, arg1)
}
