// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/controllers/events (interfaces: GitlabRequestParserValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitlabRequestParserValidator is a mock of GitlabRequestParserValidator interface.
type MockGitlabRequestParserValidator struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabRequestParserValidatorMockRecorder
}

// MockGitlabRequestParserValidatorMockRecorder is the mock recorder for MockGitlabRequestParserValidator.
type MockGitlabRequestParserValidatorMockRecorder struct {
	mock *MockGitlabRequestParserValidator
}

// NewMockGitlabRequestParserValidator creates a new mock instance.
func NewMockGitlabRequestParserValidator(ctrl *gomock.Controller) *MockGitlabRequestParserValidator {
	mock := &MockGitlabRequestParserValidator{ctrl: ctrl}
	mock.recorder = &MockGitlabRequestParserValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitlabRequestParserValidator) EXPECT() *MockGitlabRequestParserValidatorMockRecorder {
	return m.recorder
}

// ParseAndValidate mocks base method.
func (m *MockGitlabRequestParserValidator) ParseAndValidate(arg0 *http.Request, arg1 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAndValidate", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAndValidate indicates an expected call of ParseAndValidate.
func (mr *MockGitlabRequestParserValidatorMockRecorder) ParseAndValidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAndValidate", reflect.TypeOf((*MockGitlabRequestParserValidator)(nil).ParseAndValidate), arg0, arg1)
}
