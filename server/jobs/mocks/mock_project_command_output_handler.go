// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/jobs (interfaces: ProjectCommandOutputHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	command "github.com/runatlantis/atlantis/server/events/command"
	jobs "github.com/runatlantis/atlantis/server/jobs"
)

// MockProjectCommandOutputHandler is a mock of ProjectCommandOutputHandler interface.
type MockProjectCommandOutputHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCommandOutputHandlerMockRecorder
}

// MockProjectCommandOutputHandlerMockRecorder is the mock recorder for MockProjectCommandOutputHandler.
type MockProjectCommandOutputHandlerMockRecorder struct {
	mock *MockProjectCommandOutputHandler
}

// NewMockProjectCommandOutputHandler creates a new mock instance.
func NewMockProjectCommandOutputHandler(ctrl *gomock.Controller) *MockProjectCommandOutputHandler {
	mock := &MockProjectCommandOutputHandler{ctrl: ctrl}
	mock.recorder = &MockProjectCommandOutputHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectCommandOutputHandler) EXPECT() *MockProjectCommandOutputHandlerMockRecorder {
	return m.recorder
}

// CleanUp mocks base method.
func (m *MockProjectCommandOutputHandler) CleanUp(arg0 jobs.PullInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp", arg0)
}

// CleanUp indicates an expected call of CleanUp.
func (mr *MockProjectCommandOutputHandlerMockRecorder) CleanUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).CleanUp), arg0)
}

// Deregister mocks base method.
func (m *MockProjectCommandOutputHandler) Deregister(arg0 string, arg1 chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Deregister", arg0, arg1)
}

// Deregister indicates an expected call of Deregister.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Deregister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Deregister), arg0, arg1)
}

// Handle mocks base method.
func (m *MockProjectCommandOutputHandler) Handle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle")
}

// Handle indicates an expected call of Handle.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Handle))
}

// IsKeyExists mocks base method.
func (m *MockProjectCommandOutputHandler) IsKeyExists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeyExists indicates an expected call of IsKeyExists.
func (mr *MockProjectCommandOutputHandlerMockRecorder) IsKeyExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyExists", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).IsKeyExists), arg0)
}

// Register mocks base method.
func (m *MockProjectCommandOutputHandler) Register(arg0 string, arg1 chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Register), arg0, arg1)
}

// Send mocks base method.
func (m *MockProjectCommandOutputHandler) Send(arg0 command.ProjectContext, arg1 string, arg2 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0, arg1, arg2)
}

// Send indicates an expected call of Send.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Send), arg0, arg1, arg2)
}
