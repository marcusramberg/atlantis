// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/vcs (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/runatlantis/atlantis/server/events/models"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockClient) CreateComment(arg0 models.Repo, arg1 int, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockClientMockRecorder) CreateComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClient)(nil).CreateComment), arg0, arg1, arg2, arg3)
}

// DownloadRepoConfigFile mocks base method.
func (m *MockClient) DownloadRepoConfigFile(arg0 models.PullRequest) (bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadRepoConfigFile", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadRepoConfigFile indicates an expected call of DownloadRepoConfigFile.
func (mr *MockClientMockRecorder) DownloadRepoConfigFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadRepoConfigFile", reflect.TypeOf((*MockClient)(nil).DownloadRepoConfigFile), arg0)
}

// GetCloneURL mocks base method.
func (m *MockClient) GetCloneURL(arg0 models.VCSHostType, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloneURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloneURL indicates an expected call of GetCloneURL.
func (mr *MockClientMockRecorder) GetCloneURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloneURL", reflect.TypeOf((*MockClient)(nil).GetCloneURL), arg0, arg1)
}

// GetModifiedFiles mocks base method.
func (m *MockClient) GetModifiedFiles(arg0 models.Repo, arg1 models.PullRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModifiedFiles", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModifiedFiles indicates an expected call of GetModifiedFiles.
func (mr *MockClientMockRecorder) GetModifiedFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifiedFiles", reflect.TypeOf((*MockClient)(nil).GetModifiedFiles), arg0, arg1)
}

// GetTeamNamesForUser mocks base method.
func (m *MockClient) GetTeamNamesForUser(arg0 models.Repo, arg1 models.User) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamNamesForUser", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamNamesForUser indicates an expected call of GetTeamNamesForUser.
func (mr *MockClientMockRecorder) GetTeamNamesForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamNamesForUser", reflect.TypeOf((*MockClient)(nil).GetTeamNamesForUser), arg0, arg1)
}

// HidePrevCommandComments mocks base method.
func (m *MockClient) HidePrevCommandComments(arg0 models.Repo, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HidePrevCommandComments", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HidePrevCommandComments indicates an expected call of HidePrevCommandComments.
func (mr *MockClientMockRecorder) HidePrevCommandComments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HidePrevCommandComments", reflect.TypeOf((*MockClient)(nil).HidePrevCommandComments), arg0, arg1, arg2)
}

// MarkdownPullLink mocks base method.
func (m *MockClient) MarkdownPullLink(arg0 models.PullRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkdownPullLink", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkdownPullLink indicates an expected call of MarkdownPullLink.
func (mr *MockClientMockRecorder) MarkdownPullLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkdownPullLink", reflect.TypeOf((*MockClient)(nil).MarkdownPullLink), arg0)
}

// MergePull mocks base method.
func (m *MockClient) MergePull(arg0 models.PullRequest, arg1 models.PullRequestOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergePull indicates an expected call of MergePull.
func (mr *MockClientMockRecorder) MergePull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePull", reflect.TypeOf((*MockClient)(nil).MergePull), arg0, arg1)
}

// PullIsApproved mocks base method.
func (m *MockClient) PullIsApproved(arg0 models.Repo, arg1 models.PullRequest) (models.ApprovalStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullIsApproved", arg0, arg1)
	ret0, _ := ret[0].(models.ApprovalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIsApproved indicates an expected call of PullIsApproved.
func (mr *MockClientMockRecorder) PullIsApproved(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIsApproved", reflect.TypeOf((*MockClient)(nil).PullIsApproved), arg0, arg1)
}

// PullIsMergeable mocks base method.
func (m *MockClient) PullIsMergeable(arg0 models.Repo, arg1 models.PullRequest, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullIsMergeable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIsMergeable indicates an expected call of PullIsMergeable.
func (mr *MockClientMockRecorder) PullIsMergeable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIsMergeable", reflect.TypeOf((*MockClient)(nil).PullIsMergeable), arg0, arg1, arg2)
}

// SupportsSingleFileDownload mocks base method.
func (m *MockClient) SupportsSingleFileDownload(arg0 models.Repo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSingleFileDownload", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsSingleFileDownload indicates an expected call of SupportsSingleFileDownload.
func (mr *MockClientMockRecorder) SupportsSingleFileDownload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSingleFileDownload", reflect.TypeOf((*MockClient)(nil).SupportsSingleFileDownload), arg0)
}

// UpdateStatus mocks base method.
func (m *MockClient) UpdateStatus(arg0 models.Repo, arg1 models.PullRequest, arg2 models.CommitStatus, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockClientMockRecorder) UpdateStatus(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClient)(nil).UpdateStatus), arg0, arg1, arg2, arg3, arg4, arg5)
}
