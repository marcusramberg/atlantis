// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommitStatusUpdater)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	command "github.com/runatlantis/atlantis/server/events/command"
	models "github.com/runatlantis/atlantis/server/events/models"
)

// MockCommitStatusUpdater is a mock of CommitStatusUpdater interface.
type MockCommitStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCommitStatusUpdaterMockRecorder
}

// MockCommitStatusUpdaterMockRecorder is the mock recorder for MockCommitStatusUpdater.
type MockCommitStatusUpdaterMockRecorder struct {
	mock *MockCommitStatusUpdater
}

// NewMockCommitStatusUpdater creates a new mock instance.
func NewMockCommitStatusUpdater(ctrl *gomock.Controller) *MockCommitStatusUpdater {
	mock := &MockCommitStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockCommitStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitStatusUpdater) EXPECT() *MockCommitStatusUpdaterMockRecorder {
	return m.recorder
}

// UpdateCombined mocks base method.
func (m *MockCommitStatusUpdater) UpdateCombined(arg0 models.Repo, arg1 models.PullRequest, arg2 models.CommitStatus, arg3 command.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCombined", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCombined indicates an expected call of UpdateCombined.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdateCombined(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCombined", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdateCombined), arg0, arg1, arg2, arg3)
}

// UpdateCombinedCount mocks base method.
func (m *MockCommitStatusUpdater) UpdateCombinedCount(arg0 models.Repo, arg1 models.PullRequest, arg2 models.CommitStatus, arg3 command.Name, arg4, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCombinedCount", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCombinedCount indicates an expected call of UpdateCombinedCount.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdateCombinedCount(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCombinedCount", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdateCombinedCount), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateProject mocks base method.
func (m *MockCommitStatusUpdater) UpdateProject(arg0 command.ProjectContext, arg1 command.Name, arg2 models.CommitStatus, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdateProject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdateProject), arg0, arg1, arg2, arg3)
}
