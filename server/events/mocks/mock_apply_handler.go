// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ApplyRequirement)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	command "github.com/runatlantis/atlantis/server/events/command"
)

// MockApplyRequirement is a mock of ApplyRequirement interface.
type MockApplyRequirement struct {
	ctrl     *gomock.Controller
	recorder *MockApplyRequirementMockRecorder
}

// MockApplyRequirementMockRecorder is the mock recorder for MockApplyRequirement.
type MockApplyRequirementMockRecorder struct {
	mock *MockApplyRequirement
}

// NewMockApplyRequirement creates a new mock instance.
func NewMockApplyRequirement(ctrl *gomock.Controller) *MockApplyRequirement {
	mock := &MockApplyRequirement{ctrl: ctrl}
	mock.recorder = &MockApplyRequirementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplyRequirement) EXPECT() *MockApplyRequirementMockRecorder {
	return m.recorder
}

// ValidateProject mocks base method.
func (m *MockApplyRequirement) ValidateProject(arg0 string, arg1 command.ProjectContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProject", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProject indicates an expected call of ValidateProject.
func (mr *MockApplyRequirementMockRecorder) ValidateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProject", reflect.TypeOf((*MockApplyRequirement)(nil).ValidateProject), arg0, arg1)
}
