// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: WorkingDir)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
)

// MockWorkingDir is a mock of WorkingDir interface.
type MockWorkingDir struct {
	ctrl     *gomock.Controller
	recorder *MockWorkingDirMockRecorder
}

// MockWorkingDirMockRecorder is the mock recorder for MockWorkingDir.
type MockWorkingDirMockRecorder struct {
	mock *MockWorkingDir
}

// NewMockWorkingDir creates a new mock instance.
func NewMockWorkingDir(ctrl *gomock.Controller) *MockWorkingDir {
	mock := &MockWorkingDir{ctrl: ctrl}
	mock.recorder = &MockWorkingDirMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkingDir) EXPECT() *MockWorkingDirMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockWorkingDir) Clone(arg0 logging.SimpleLogging, arg1 models.Repo, arg2 models.PullRequest, arg3 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Clone indicates an expected call of Clone.
func (mr *MockWorkingDirMockRecorder) Clone(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockWorkingDir)(nil).Clone), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockWorkingDir) Delete(arg0 models.Repo, arg1 models.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkingDirMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkingDir)(nil).Delete), arg0, arg1)
}

// DeleteForWorkspace mocks base method.
func (m *MockWorkingDir) DeleteForWorkspace(arg0 models.Repo, arg1 models.PullRequest, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForWorkspace indicates an expected call of DeleteForWorkspace.
func (mr *MockWorkingDirMockRecorder) DeleteForWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForWorkspace", reflect.TypeOf((*MockWorkingDir)(nil).DeleteForWorkspace), arg0, arg1, arg2)
}

// GetPullDir mocks base method.
func (m *MockWorkingDir) GetPullDir(arg0 models.Repo, arg1 models.PullRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullDir", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullDir indicates an expected call of GetPullDir.
func (mr *MockWorkingDirMockRecorder) GetPullDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullDir", reflect.TypeOf((*MockWorkingDir)(nil).GetPullDir), arg0, arg1)
}

// GetWorkingDir mocks base method.
func (m *MockWorkingDir) GetWorkingDir(arg0 models.Repo, arg1 models.PullRequest, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingDir indicates an expected call of GetWorkingDir.
func (mr *MockWorkingDirMockRecorder) GetWorkingDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingDir", reflect.TypeOf((*MockWorkingDir)(nil).GetWorkingDir), arg0, arg1, arg2)
}

// HasDiverged mocks base method.
func (m *MockWorkingDir) HasDiverged(arg0 logging.SimpleLogging, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDiverged", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDiverged indicates an expected call of HasDiverged.
func (mr *MockWorkingDirMockRecorder) HasDiverged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDiverged", reflect.TypeOf((*MockWorkingDir)(nil).HasDiverged), arg0, arg1)
}
