// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: WorkingDirLocker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkingDirLocker is a mock of WorkingDirLocker interface.
type MockWorkingDirLocker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkingDirLockerMockRecorder
}

// MockWorkingDirLockerMockRecorder is the mock recorder for MockWorkingDirLocker.
type MockWorkingDirLockerMockRecorder struct {
	mock *MockWorkingDirLocker
}

// NewMockWorkingDirLocker creates a new mock instance.
func NewMockWorkingDirLocker(ctrl *gomock.Controller) *MockWorkingDirLocker {
	mock := &MockWorkingDirLocker{ctrl: ctrl}
	mock.recorder = &MockWorkingDirLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkingDirLocker) EXPECT() *MockWorkingDirLockerMockRecorder {
	return m.recorder
}

// TryLock mocks base method.
func (m *MockWorkingDirLocker) TryLock(arg0 string, arg1 int, arg2, arg3 string) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockWorkingDirLockerMockRecorder) TryLock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockWorkingDirLocker)(nil).TryLock), arg0, arg1, arg2, arg3)
}

// TryLockPull mocks base method.
func (m *MockWorkingDirLocker) TryLockPull(arg0 string, arg1 int) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLockPull", arg0, arg1)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLockPull indicates an expected call of TryLockPull.
func (mr *MockWorkingDirLockerMockRecorder) TryLockPull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLockPull", reflect.TypeOf((*MockWorkingDirLocker)(nil).TryLockPull), arg0, arg1)
}
