// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: EventParsing)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v31/github"
	azuredevops "github.com/mcdafydd/go-azuredevops/azuredevops"
	models "github.com/runatlantis/atlantis/server/events/models"
	gitlab "github.com/xanzy/go-gitlab"
)

// MockEventParsing is a mock of EventParsing interface.
type MockEventParsing struct {
	ctrl     *gomock.Controller
	recorder *MockEventParsingMockRecorder
}

// MockEventParsingMockRecorder is the mock recorder for MockEventParsing.
type MockEventParsingMockRecorder struct {
	mock *MockEventParsing
}

// NewMockEventParsing creates a new mock instance.
func NewMockEventParsing(ctrl *gomock.Controller) *MockEventParsing {
	mock := &MockEventParsing{ctrl: ctrl}
	mock.recorder = &MockEventParsingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventParsing) EXPECT() *MockEventParsingMockRecorder {
	return m.recorder
}

// GetBitbucketCloudPullEventType mocks base method.
func (m *MockEventParsing) GetBitbucketCloudPullEventType(arg0 string) models.PullRequestEventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBitbucketCloudPullEventType", arg0)
	ret0, _ := ret[0].(models.PullRequestEventType)
	return ret0
}

// GetBitbucketCloudPullEventType indicates an expected call of GetBitbucketCloudPullEventType.
func (mr *MockEventParsingMockRecorder) GetBitbucketCloudPullEventType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitbucketCloudPullEventType", reflect.TypeOf((*MockEventParsing)(nil).GetBitbucketCloudPullEventType), arg0)
}

// GetBitbucketServerPullEventType mocks base method.
func (m *MockEventParsing) GetBitbucketServerPullEventType(arg0 string) models.PullRequestEventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBitbucketServerPullEventType", arg0)
	ret0, _ := ret[0].(models.PullRequestEventType)
	return ret0
}

// GetBitbucketServerPullEventType indicates an expected call of GetBitbucketServerPullEventType.
func (mr *MockEventParsingMockRecorder) GetBitbucketServerPullEventType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitbucketServerPullEventType", reflect.TypeOf((*MockEventParsing)(nil).GetBitbucketServerPullEventType), arg0)
}

// ParseAPIPlanRequest mocks base method.
func (m *MockEventParsing) ParseAPIPlanRequest(arg0 models.VCSHostType, arg1, arg2 string) (models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAPIPlanRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAPIPlanRequest indicates an expected call of ParseAPIPlanRequest.
func (mr *MockEventParsingMockRecorder) ParseAPIPlanRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAPIPlanRequest", reflect.TypeOf((*MockEventParsing)(nil).ParseAPIPlanRequest), arg0, arg1, arg2)
}

// ParseAzureDevopsPull mocks base method.
func (m *MockEventParsing) ParseAzureDevopsPull(arg0 *azuredevops.GitPullRequest) (models.PullRequest, models.Repo, models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAzureDevopsPull", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseAzureDevopsPull indicates an expected call of ParseAzureDevopsPull.
func (mr *MockEventParsingMockRecorder) ParseAzureDevopsPull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAzureDevopsPull", reflect.TypeOf((*MockEventParsing)(nil).ParseAzureDevopsPull), arg0)
}

// ParseAzureDevopsPullEvent mocks base method.
func (m *MockEventParsing) ParseAzureDevopsPullEvent(arg0 azuredevops.Event) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAzureDevopsPullEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseAzureDevopsPullEvent indicates an expected call of ParseAzureDevopsPullEvent.
func (mr *MockEventParsingMockRecorder) ParseAzureDevopsPullEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAzureDevopsPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseAzureDevopsPullEvent), arg0)
}

// ParseAzureDevopsRepo mocks base method.
func (m *MockEventParsing) ParseAzureDevopsRepo(arg0 *azuredevops.GitRepository) (models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAzureDevopsRepo", arg0)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAzureDevopsRepo indicates an expected call of ParseAzureDevopsRepo.
func (mr *MockEventParsingMockRecorder) ParseAzureDevopsRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAzureDevopsRepo", reflect.TypeOf((*MockEventParsing)(nil).ParseAzureDevopsRepo), arg0)
}

// ParseBitbucketCloudPullCommentEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketCloudPullCommentEvent(arg0 []byte) (models.PullRequest, models.Repo, models.Repo, models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketCloudPullCommentEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseBitbucketCloudPullCommentEvent indicates an expected call of ParseBitbucketCloudPullCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketCloudPullCommentEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketCloudPullCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketCloudPullCommentEvent), arg0)
}

// ParseBitbucketCloudPullEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketCloudPullEvent(arg0 []byte) (models.PullRequest, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketCloudPullEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ParseBitbucketCloudPullEvent indicates an expected call of ParseBitbucketCloudPullEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketCloudPullEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketCloudPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketCloudPullEvent), arg0)
}

// ParseBitbucketServerPullCommentEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketServerPullCommentEvent(arg0 []byte) (models.PullRequest, models.Repo, models.Repo, models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketServerPullCommentEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseBitbucketServerPullCommentEvent indicates an expected call of ParseBitbucketServerPullCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketServerPullCommentEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketServerPullCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketServerPullCommentEvent), arg0)
}

// ParseBitbucketServerPullEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketServerPullEvent(arg0 []byte) (models.PullRequest, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketServerPullEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ParseBitbucketServerPullEvent indicates an expected call of ParseBitbucketServerPullEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketServerPullEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketServerPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketServerPullEvent), arg0)
}

// ParseGithubIssueCommentEvent mocks base method.
func (m *MockEventParsing) ParseGithubIssueCommentEvent(arg0 *github.IssueCommentEvent) (models.Repo, models.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubIssueCommentEvent", arg0)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(models.User)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGithubIssueCommentEvent indicates an expected call of ParseGithubIssueCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseGithubIssueCommentEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubIssueCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubIssueCommentEvent), arg0)
}

// ParseGithubPull mocks base method.
func (m *MockEventParsing) ParseGithubPull(arg0 *github.PullRequest) (models.PullRequest, models.Repo, models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubPull", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGithubPull indicates an expected call of ParseGithubPull.
func (mr *MockEventParsingMockRecorder) ParseGithubPull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubPull", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubPull), arg0)
}

// ParseGithubPullEvent mocks base method.
func (m *MockEventParsing) ParseGithubPullEvent(arg0 *github.PullRequestEvent) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubPullEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseGithubPullEvent indicates an expected call of ParseGithubPullEvent.
func (mr *MockEventParsingMockRecorder) ParseGithubPullEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubPullEvent), arg0)
}

// ParseGithubRepo mocks base method.
func (m *MockEventParsing) ParseGithubRepo(arg0 *github.Repository) (models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubRepo", arg0)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseGithubRepo indicates an expected call of ParseGithubRepo.
func (mr *MockEventParsingMockRecorder) ParseGithubRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubRepo", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubRepo), arg0)
}

// ParseGitlabMergeRequest mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequest(arg0 *gitlab.MergeRequest, arg1 models.Repo) models.PullRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequest", arg0, arg1)
	ret0, _ := ret[0].(models.PullRequest)
	return ret0
}

// ParseGitlabMergeRequest indicates an expected call of ParseGitlabMergeRequest.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequest", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequest), arg0, arg1)
}

// ParseGitlabMergeRequestCommentEvent mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequestCommentEvent(arg0 gitlab.MergeCommentEvent) (models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequestCommentEvent", arg0)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.User)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGitlabMergeRequestCommentEvent indicates an expected call of ParseGitlabMergeRequestCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequestCommentEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequestCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequestCommentEvent), arg0)
}

// ParseGitlabMergeRequestEvent mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequestEvent(arg0 gitlab.MergeEvent) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequestEvent", arg0)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseGitlabMergeRequestEvent indicates an expected call of ParseGitlabMergeRequestEvent.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequestEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequestEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequestEvent), arg0)
}

// ParseGitlabMergeRequestUpdateEvent mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequestUpdateEvent(arg0 gitlab.MergeEvent) models.PullRequestEventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequestUpdateEvent", arg0)
	ret0, _ := ret[0].(models.PullRequestEventType)
	return ret0
}

// ParseGitlabMergeRequestUpdateEvent indicates an expected call of ParseGitlabMergeRequestUpdateEvent.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequestUpdateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequestUpdateEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequestUpdateEvent), arg0)
}
