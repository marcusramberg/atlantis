// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommentParsing)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/runatlantis/atlantis/server/events"
	models "github.com/runatlantis/atlantis/server/events/models"
)

// MockCommentParsing is a mock of CommentParsing interface.
type MockCommentParsing struct {
	ctrl     *gomock.Controller
	recorder *MockCommentParsingMockRecorder
}

// MockCommentParsingMockRecorder is the mock recorder for MockCommentParsing.
type MockCommentParsingMockRecorder struct {
	mock *MockCommentParsing
}

// NewMockCommentParsing creates a new mock instance.
func NewMockCommentParsing(ctrl *gomock.Controller) *MockCommentParsing {
	mock := &MockCommentParsing{ctrl: ctrl}
	mock.recorder = &MockCommentParsingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentParsing) EXPECT() *MockCommentParsingMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockCommentParsing) Parse(arg0 string, arg1 models.VCSHostType) events.CommentParseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(events.CommentParseResult)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockCommentParsingMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockCommentParsing)(nil).Parse), arg0, arg1)
}
