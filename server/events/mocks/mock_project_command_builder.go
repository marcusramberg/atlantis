// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ProjectCommandBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/runatlantis/atlantis/server/events"
	command "github.com/runatlantis/atlantis/server/events/command"
)

// MockProjectCommandBuilder is a mock of ProjectCommandBuilder interface.
type MockProjectCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCommandBuilderMockRecorder
}

// MockProjectCommandBuilderMockRecorder is the mock recorder for MockProjectCommandBuilder.
type MockProjectCommandBuilderMockRecorder struct {
	mock *MockProjectCommandBuilder
}

// NewMockProjectCommandBuilder creates a new mock instance.
func NewMockProjectCommandBuilder(ctrl *gomock.Controller) *MockProjectCommandBuilder {
	mock := &MockProjectCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockProjectCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectCommandBuilder) EXPECT() *MockProjectCommandBuilderMockRecorder {
	return m.recorder
}

// BuildApplyCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildApplyCommands(arg0 *command.Context, arg1 *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApplyCommands", arg0, arg1)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildApplyCommands indicates an expected call of BuildApplyCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildApplyCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApplyCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildApplyCommands), arg0, arg1)
}

// BuildApprovePoliciesCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildApprovePoliciesCommands(arg0 *command.Context, arg1 *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApprovePoliciesCommands", arg0, arg1)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildApprovePoliciesCommands indicates an expected call of BuildApprovePoliciesCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildApprovePoliciesCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApprovePoliciesCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildApprovePoliciesCommands), arg0, arg1)
}

// BuildAutoplanCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildAutoplanCommands(arg0 *command.Context) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAutoplanCommands", arg0)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAutoplanCommands indicates an expected call of BuildAutoplanCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildAutoplanCommands(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAutoplanCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildAutoplanCommands), arg0)
}

// BuildPlanCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildPlanCommands(arg0 *command.Context, arg1 *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPlanCommands", arg0, arg1)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildPlanCommands indicates an expected call of BuildPlanCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildPlanCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPlanCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildPlanCommands), arg0, arg1)
}

// BuildVersionCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildVersionCommands(arg0 *command.Context, arg1 *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVersionCommands", arg0, arg1)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildVersionCommands indicates an expected call of BuildVersionCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildVersionCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVersionCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildVersionCommands), arg0, arg1)
}
