// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommentBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentBuilder is a mock of CommentBuilder interface.
type MockCommentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCommentBuilderMockRecorder
}

// MockCommentBuilderMockRecorder is the mock recorder for MockCommentBuilder.
type MockCommentBuilderMockRecorder struct {
	mock *MockCommentBuilder
}

// NewMockCommentBuilder creates a new mock instance.
func NewMockCommentBuilder(ctrl *gomock.Controller) *MockCommentBuilder {
	mock := &MockCommentBuilder{ctrl: ctrl}
	mock.recorder = &MockCommentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentBuilder) EXPECT() *MockCommentBuilderMockRecorder {
	return m.recorder
}

// BuildApplyComment mocks base method.
func (m *MockCommentBuilder) BuildApplyComment(arg0, arg1, arg2 string, arg3 bool) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApplyComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildApplyComment indicates an expected call of BuildApplyComment.
func (mr *MockCommentBuilderMockRecorder) BuildApplyComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApplyComment", reflect.TypeOf((*MockCommentBuilder)(nil).BuildApplyComment), arg0, arg1, arg2, arg3)
}

// BuildPlanComment mocks base method.
func (m *MockCommentBuilder) BuildPlanComment(arg0, arg1, arg2 string, arg3 []string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPlanComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildPlanComment indicates an expected call of BuildPlanComment.
func (mr *MockCommentBuilderMockRecorder) BuildPlanComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPlanComment", reflect.TypeOf((*MockCommentBuilder)(nil).BuildPlanComment), arg0, arg1, arg2, arg3)
}

// BuildVersionComment mocks base method.
func (m *MockCommentBuilder) BuildVersionComment(arg0, arg1, arg2 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVersionComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildVersionComment indicates an expected call of BuildVersionComment.
func (mr *MockCommentBuilderMockRecorder) BuildVersionComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVersionComment", reflect.TypeOf((*MockCommentBuilder)(nil).BuildVersionComment), arg0, arg1, arg2)
}
