// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: PreWorkflowHooksCommandRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/runatlantis/atlantis/server/events"
	command "github.com/runatlantis/atlantis/server/events/command"
)

// MockPreWorkflowHooksCommandRunner is a mock of PreWorkflowHooksCommandRunner interface.
type MockPreWorkflowHooksCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPreWorkflowHooksCommandRunnerMockRecorder
}

// MockPreWorkflowHooksCommandRunnerMockRecorder is the mock recorder for MockPreWorkflowHooksCommandRunner.
type MockPreWorkflowHooksCommandRunnerMockRecorder struct {
	mock *MockPreWorkflowHooksCommandRunner
}

// NewMockPreWorkflowHooksCommandRunner creates a new mock instance.
func NewMockPreWorkflowHooksCommandRunner(ctrl *gomock.Controller) *MockPreWorkflowHooksCommandRunner {
	mock := &MockPreWorkflowHooksCommandRunner{ctrl: ctrl}
	mock.recorder = &MockPreWorkflowHooksCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreWorkflowHooksCommandRunner) EXPECT() *MockPreWorkflowHooksCommandRunnerMockRecorder {
	return m.recorder
}

// RunPreHooks mocks base method.
func (m *MockPreWorkflowHooksCommandRunner) RunPreHooks(arg0 *command.Context, arg1 *events.CommentCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreHooks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreHooks indicates an expected call of RunPreHooks.
func (mr *MockPreWorkflowHooksCommandRunnerMockRecorder) RunPreHooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreHooks", reflect.TypeOf((*MockPreWorkflowHooksCommandRunner)(nil).RunPreHooks), arg0, arg1)
}
