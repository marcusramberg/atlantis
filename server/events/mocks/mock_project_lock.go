// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ProjectLocker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/runatlantis/atlantis/server/events"
	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
)

// MockProjectLocker is a mock of ProjectLocker interface.
type MockProjectLocker struct {
	ctrl     *gomock.Controller
	recorder *MockProjectLockerMockRecorder
}

// MockProjectLockerMockRecorder is the mock recorder for MockProjectLocker.
type MockProjectLockerMockRecorder struct {
	mock *MockProjectLocker
}

// NewMockProjectLocker creates a new mock instance.
func NewMockProjectLocker(ctrl *gomock.Controller) *MockProjectLocker {
	mock := &MockProjectLocker{ctrl: ctrl}
	mock.recorder = &MockProjectLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectLocker) EXPECT() *MockProjectLockerMockRecorder {
	return m.recorder
}

// TryLock mocks base method.
func (m *MockProjectLocker) TryLock(arg0 logging.SimpleLogging, arg1 models.PullRequest, arg2 models.User, arg3 string, arg4 models.Project) (*events.TryLockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*events.TryLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockProjectLockerMockRecorder) TryLock(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockProjectLocker)(nil).TryLock), arg0, arg1, arg2, arg3, arg4)
}
