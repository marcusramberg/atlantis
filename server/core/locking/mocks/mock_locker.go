// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/locking (interfaces: Locker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	locking "github.com/runatlantis/atlantis/server/core/locking"
	models "github.com/runatlantis/atlantis/server/events/models"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// GetLock mocks base method.
func (m *MockLocker) GetLock(arg0 string) (*models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLock", arg0)
	ret0, _ := ret[0].(*models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLock indicates an expected call of GetLock.
func (mr *MockLockerMockRecorder) GetLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockLocker)(nil).GetLock), arg0)
}

// List mocks base method.
func (m *MockLocker) List() (map[string]models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[string]models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLockerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLocker)(nil).List))
}

// TryLock mocks base method.
func (m *MockLocker) TryLock(arg0 models.Project, arg1 string, arg2 models.PullRequest, arg3 models.User) (locking.TryLockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(locking.TryLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockLockerMockRecorder) TryLock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockLocker)(nil).TryLock), arg0, arg1, arg2, arg3)
}

// Unlock mocks base method.
func (m *MockLocker) Unlock(arg0 string) (*models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(*models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockerMockRecorder) Unlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLocker)(nil).Unlock), arg0)
}

// UnlockByPull mocks base method.
func (m *MockLocker) UnlockByPull(arg0 string, arg1 int) ([]models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockByPull", arg0, arg1)
	ret0, _ := ret[0].([]models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockByPull indicates an expected call of UnlockByPull.
func (mr *MockLockerMockRecorder) UnlockByPull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockByPull", reflect.TypeOf((*MockLocker)(nil).UnlockByPull), arg0, arg1)
}
