// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime (interfaces: PullApprovedChecker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/runatlantis/atlantis/server/events/models"
)

// MockPullApprovedChecker is a mock of PullApprovedChecker interface.
type MockPullApprovedChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPullApprovedCheckerMockRecorder
}

// MockPullApprovedCheckerMockRecorder is the mock recorder for MockPullApprovedChecker.
type MockPullApprovedCheckerMockRecorder struct {
	mock *MockPullApprovedChecker
}

// NewMockPullApprovedChecker creates a new mock instance.
func NewMockPullApprovedChecker(ctrl *gomock.Controller) *MockPullApprovedChecker {
	mock := &MockPullApprovedChecker{ctrl: ctrl}
	mock.recorder = &MockPullApprovedCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullApprovedChecker) EXPECT() *MockPullApprovedCheckerMockRecorder {
	return m.recorder
}

// PullIsApproved mocks base method.
func (m *MockPullApprovedChecker) PullIsApproved(arg0 models.Repo, arg1 models.PullRequest) (models.ApprovalStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullIsApproved", arg0, arg1)
	ret0, _ := ret[0].(models.ApprovalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIsApproved indicates an expected call of PullIsApproved.
func (mr *MockPullApprovedCheckerMockRecorder) PullIsApproved(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIsApproved", reflect.TypeOf((*MockPullApprovedChecker)(nil).PullIsApproved), arg0, arg1)
}
