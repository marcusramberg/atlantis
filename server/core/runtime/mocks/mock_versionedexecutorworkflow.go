// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime (interfaces: VersionedExecutorWorkflow)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	version "github.com/hashicorp/go-version"
	command "github.com/runatlantis/atlantis/server/events/command"
	logging "github.com/runatlantis/atlantis/server/logging"
)

// MockVersionedExecutorWorkflow is a mock of VersionedExecutorWorkflow interface.
type MockVersionedExecutorWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockVersionedExecutorWorkflowMockRecorder
}

// MockVersionedExecutorWorkflowMockRecorder is the mock recorder for MockVersionedExecutorWorkflow.
type MockVersionedExecutorWorkflowMockRecorder struct {
	mock *MockVersionedExecutorWorkflow
}

// NewMockVersionedExecutorWorkflow creates a new mock instance.
func NewMockVersionedExecutorWorkflow(ctrl *gomock.Controller) *MockVersionedExecutorWorkflow {
	mock := &MockVersionedExecutorWorkflow{ctrl: ctrl}
	mock.recorder = &MockVersionedExecutorWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionedExecutorWorkflow) EXPECT() *MockVersionedExecutorWorkflowMockRecorder {
	return m.recorder
}

// EnsureExecutorVersion mocks base method.
func (m *MockVersionedExecutorWorkflow) EnsureExecutorVersion(arg0 logging.SimpleLogging, arg1 *version.Version) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureExecutorVersion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureExecutorVersion indicates an expected call of EnsureExecutorVersion.
func (mr *MockVersionedExecutorWorkflowMockRecorder) EnsureExecutorVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureExecutorVersion", reflect.TypeOf((*MockVersionedExecutorWorkflow)(nil).EnsureExecutorVersion), arg0, arg1)
}

// Run mocks base method.
func (m *MockVersionedExecutorWorkflow) Run(arg0 command.ProjectContext, arg1 string, arg2 map[string]string, arg3 string, arg4 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockVersionedExecutorWorkflowMockRecorder) Run(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVersionedExecutorWorkflow)(nil).Run), arg0, arg1, arg2, arg3, arg4)
}
