// Code generated by MockGen. DO NOT EDIT.
// Source: version_path.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	version "github.com/hashicorp/go-version"
)

// MockExecutionVersionCache is a mock of ExecutionVersionCache interface.
type MockExecutionVersionCache struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionVersionCacheMockRecorder
}

// MockExecutionVersionCacheMockRecorder is the mock recorder for MockExecutionVersionCache.
type MockExecutionVersionCacheMockRecorder struct {
	mock *MockExecutionVersionCache
}

// NewMockExecutionVersionCache creates a new mock instance.
func NewMockExecutionVersionCache(ctrl *gomock.Controller) *MockExecutionVersionCache {
	mock := &MockExecutionVersionCache{ctrl: ctrl}
	mock.recorder = &MockExecutionVersionCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionVersionCache) EXPECT() *MockExecutionVersionCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExecutionVersionCache) Get(key *version.Version) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExecutionVersionCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExecutionVersionCache)(nil).Get), key)
}

// MockKeySerializer is a mock of KeySerializer interface.
type MockKeySerializer struct {
	ctrl     *gomock.Controller
	recorder *MockKeySerializerMockRecorder
}

// MockKeySerializerMockRecorder is the mock recorder for MockKeySerializer.
type MockKeySerializerMockRecorder struct {
	mock *MockKeySerializer
}

// NewMockKeySerializer creates a new mock instance.
func NewMockKeySerializer(ctrl *gomock.Controller) *MockKeySerializer {
	mock := &MockKeySerializer{ctrl: ctrl}
	mock.recorder = &MockKeySerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeySerializer) EXPECT() *MockKeySerializerMockRecorder {
	return m.recorder
}

// Serialize mocks base method.
func (m *MockKeySerializer) Serialize(key *version.Version) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockKeySerializerMockRecorder) Serialize(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockKeySerializer)(nil).Serialize), key)
}
